on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform run command'
        required: true
        type: choice
        options:
        - Plan 
        - Apply 
        - Destroy
      tfpath:
        description: 'TF File Path'     
        required: false
        default: './'
      instance_count: 
        description: 'Input the number of instances you want to create'
        required: true
        default: '1'

env: 
  db_table_name: shfarrukhb-finaltask-dynamodb
  s3_name: shfarrukhb-finaltask-state
  region: us-east-1
 
jobs:
  Terraform_plan:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'Plan' }}
    
    steps:
    
    - uses: actions/checkout@v2.5.0

    - name: terrafrom install 
      uses: hashicorp/setup-terraform@v2.0.2
   
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.region }}
    
    - name: Checking exsistance of tf files
      run: ls -la  
    
    - name: setup python
      uses: actions/setup-python@v4
      with:
          python-version: '3.10' # install the python version needed

    - name: DB check 
      id: check-db
      run: |
          python -m pip install --upgrade pip
          pip install boto3
          python ./python/db_check.py

    - name: S3 check 
      id: check-s3
      run: |
          python -m pip install --upgrade pip
          python ./python/s3_check.py
    
    - name: terrafrom init 
      run: |
        terraform init
        terraform plan
  
  Terraform_apply:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'Apply' }}
    steps:
    
    - uses: actions/checkout@v2.5.0

    - name: terrafrom install 
      uses: hashicorp/setup-terraform@v2.0.2
   
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.region }}
    
    - name: Checking exsistance of tf files
      run: ls -la  
    
    - name: setup python
      uses: actions/setup-python@v4
      with:
          python-version: '3.10' # install the python version needed

    - name: DB check 
      id: check-db
      run: |
          python -m pip install --upgrade pip
          pip install boto3
          python ./python/db_check.py
    
    - name: DB create  /python script
      run: |
          python ./python/db_create.py
      if: steps.check-db.outputs.db_chr == 'None'
        
    - name: S3 check 
      id: check-s3
      run: |
          python -m pip install --upgrade pip
          python ./python/s3_check.py
    
    - name: S3 create aws cli
      run: |
        aws s3api create-bucket --bucket ${{ env.s3_name }} --region ${{ env.region }}
        echo "Bucket ${{ env.s3_name}} has been created"
      if: steps.check-s3.outputs.s3_chr == 'None'

    - name: terraform applying
      run: |
        terraform init
        terraform apply --auto-approve -lock=false

  Terraform_destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'Destroy' }}
    steps:
    
    - uses: actions/checkout@v2.5.0

    - name: terrafrom install 
      uses: hashicorp/setup-terraform@v2.0.2
   
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.region }}
    
    - name: terraform destroy
      run: |
        terraform init
        terraform destroy --auto-approve -lock=false
    
    - name: setup python
      uses: actions/setup-python@v4
      with:
          python-version: '3.10' # install the python version needed

    - name: S3 check 
      id: check-s3
      run: |
          python -m pip install --upgrade pip
          pip install boto3
          python ./python/s3_check.py

    - name: S3 delete aws cli
      run: |
        aws s3 rm s3://${{ env.s3_name }} --recursive 
        aws s3api delete-bucket --bucket ${{ env.s3_name }} --region ${{ env.region }}
        echo "Bucket ${{ env.s3_name}} has been removed"
      if: steps.check-s3.outputs.s3_chr == 'Yes'
 
    - name: Table check 
      id: check-db
      run: |
          python -m pip install --upgrade pip
          pip install boto3
          python ./python/db_check.py
    
    - name:  Table delete
      run: |
        aws dynamodb delete-table --table-name ${{ env.db_table_name }}
      if: steps.check-db.outputs.db_chr == 'Yes'

    